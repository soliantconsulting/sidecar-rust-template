use async_trait::async_trait;
use aws_config::BehaviorVersion;
use aws_lambda_events::http::StatusCode;
use lambda_http::http::Uri;
use lambda_http::tracing::debug;
use lambda_http::{tracing, Body, Request, RequestExt, Response};
use serde_json::{json, Value};
use {{ crate_name }}::config::get_config;
use {{ crate_name }}::http::{
    e400, parse_body, start_http_service, HttpError, HttpErrorResponse, HttpErrorSource,
    HttpHandler,
};

struct Handler {
    sqs_client: aws_sdk_sqs::Client,
    queue_url: String,
}

#[async_trait]
impl HttpHandler for Handler {
    async fn handle(&self, request: Request) -> Result<Response<Body>, HttpError> {
        let body: Value = parse_body(&request).map_err(e400)?;

        self.sqs_client
            .send_message()
            .queue_url(&self.queue_url)
            .message_body(body.to_string())
            .send()
            .await?;

        let response = Response::builder()
            .status(StatusCode::OK)
            .header("content-type", "text/xml")
            .body(Body::Text("<Response/>".to_string()))?;

        Ok(response)
    }
}

#[tokio::main]
async fn main() -> Result<(), lambda_http::Error> {
    tracing::init_default_subscriber();

    let config = get_config().await?;
    let aws_config = aws_config::load_defaults(BehaviorVersion::latest()).await;
    let handler = Handler {
        sqs_client: aws_sdk_sqs::Client::new(&aws_config),
        queue_url: std::env::var("QUEUE_URL").expect("QUEUE_URL not set"),
        signing_key: config.signing_key.into_bytes(),
    };

    start_http_service(handler).await
}
